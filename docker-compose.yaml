version: "3"

services:
  mongo:
    image: mongo
    container_name: mongo
    hostname: mongo
    volumes:
      - mongo-volume:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - 27017:27017
    restart: unless-stopped
  redis:
    image: redis:6-alpine
    container_name: redis
    hostname: redis
    volumes:
      - redis-volume:/data
    ports:
      - 6379:6379
    restart: unless-stopped
  keycloak:
    image: quay.io/keycloak/keycloak:12.0.0
    container_name: keycloak
    hostname: keycloak
    environment:
      KEYCLOAK_FRONTEND_URL: http://keycloak:8080/auth/
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - 7777:8080
#  zookeeper:
#    image: "bitnami/zookeeper:latest"
#    ports:
#      - "2181:2181"
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#  kafka:
#    image: "bitnami/kafka:latest"
#    ports:
#      - "9092:9092"
#      - "9093:9093"
#    environment:
#      - KAFKA_BROKER_ID=1
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#      - ALLOW_PLAINTEXT_LISTENER=yes
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
#      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
#      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
#    depends_on:
#      - zookeeper
#  schema-registry:
#    image: confluentinc/cp-schema-registry:5.1.2
#    restart: always
#    depends_on:
#      - zookeeper
#      - kafka
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
#      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
#      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
#    ports:
#      - 8085:8085
  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.1.2
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka1:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "9093:9093"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991


  schemaregistry:
    image: confluentinc/cp-schema-registry:5.1.2
    restart: always
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8085"
    ports:
      - 8085:8085


  restproxy:
    image: confluentinc/cp-kafka-rest:5.1.2
    restart: always
    depends_on:
      - kafka
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schemaregistry:8085"
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_DEBUG: "true"
    ports:
      - 8082:8082
  zipkin:
    image: "openzipkin/zipkin"
    ports:
      - "9411:9411"
#  config-server:
#    image: "config-server:latest"
#    ports:
#      - "8080:8080"
#  product-adapter-service:
#    image: "product-adapter-service:latest"
#    ports:
#      - "9082:8080"
#    depends_on:
#      - registry-service
#  product-service:
#    image: "product-service:latest"
#    ports:
#      - "8080"
#    depends_on:
#      - registry-service
#  registry-service:
#    image: "registry-service:latest"
#    ports:
#      - "8761:8761"
#    depends_on:
#      - config-server
#  audit-service:
#    image: "audit-service:latest"
#    ports:
#      - "8080"
#    depends_on:
#      - registry-service
#  spring-cloud-gateway:
#    image: "spring-cloud-gateway:latest"
#    ports:
#      - "8070:8080"
#    depends_on:
#      - registry-service
volumes:
  mongo-volume: { }
  redis-volume: { }
